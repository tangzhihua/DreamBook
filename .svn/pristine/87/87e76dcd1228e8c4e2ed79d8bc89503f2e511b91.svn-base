package cn.retech.global_data_cache;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import android.text.TextUtils;
import cn.retech.activity.MyApplication;
import cn.retech.toolutils.DebugLog;


/**
 * 这里序列化对象的保存目录是 : /data/data/cn.skyduck.activity/files/ , 这个目录会在用户在 "应用程序管理"
 * 中点击 "清理数据" 按钮后被清理
 * 
 * @author computer
 * 
 */
public final class GlobalDataCacheForNeedSaveToFileSystem {
	private final static String TAG = GlobalDataCacheForNeedSaveToFileSystem.class.getSimpleName();

	private GlobalDataCacheForNeedSaveToFileSystem() {

	}

	/**
	 * 读取本地缓存的 用户登录信息
	 */
	public static synchronized void readUserLoginInfo() {

		// 用户最后一次成功登录时的用户名
		DebugLog.i(TAG, "start loading --> usernameForLastSuccessfulLogon");
		final String usernameForLastSuccessfulLogon = (String) deserializeObjectFromFile(CacheDataNameForSaveToFile.USERNAME_FOR_LAST_SUCCESSFUL_LOGON.name());
		if (!TextUtils.isEmpty(usernameForLastSuccessfulLogon)) {
			DebugLog.i(TAG, "usernameForLastSuccessfulLogon=" + usernameForLastSuccessfulLogon);
			if (GlobalDataCacheForMemorySingleton.getInstance.getUsernameForLastSuccessfulLogon() == null) {
				GlobalDataCacheForMemorySingleton.getInstance.setUsernameForLastSuccessfulLogon(usernameForLastSuccessfulLogon);
			}
		} else {
			DebugLog.i(TAG, "usernameForLastSuccessfulLogon is null");
		}

		// 用户最后一次成功登录时的密码
		DebugLog.i(TAG, "start loading --> passwordForLastSuccessfulLogon");
		final String passwordForLastSuccessfulLogon = (String) deserializeObjectFromFile(CacheDataNameForSaveToFile.PASSWORD_FOR_LAST_SUCCESSFUL_LOGON.name());
		if (!TextUtils.isEmpty(passwordForLastSuccessfulLogon)) {
			DebugLog.i(TAG, "passwordForLastSuccessfulLogon=" + passwordForLastSuccessfulLogon);
			if (GlobalDataCacheForMemorySingleton.getInstance.getPasswordForLastSuccessfulLogon() == null) {
				GlobalDataCacheForMemorySingleton.getInstance.setPasswordForLastSuccessfulLogon(passwordForLastSuccessfulLogon);
			}
		} else {
			DebugLog.i(TAG, "passwordForLastSuccessfulLogon is null");
		}
	}

	// ///////////////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////////////////////////////////////

	/**
	 * 保存用户登录信息到设备文件系统中
	 */
	public static synchronized void writeUserLoginInfo() {

		//
		final String usernameForLastSuccessfulLogon = GlobalDataCacheForMemorySingleton.getInstance.getUsernameForLastSuccessfulLogon();
		if (!TextUtils.isEmpty(usernameForLastSuccessfulLogon)) {
			serializeObjectToFile(CacheDataNameForSaveToFile.USERNAME_FOR_LAST_SUCCESSFUL_LOGON.name(), usernameForLastSuccessfulLogon);
		}

		//
		final String passwordForLastSuccessfulLogon = GlobalDataCacheForMemorySingleton.getInstance.getPasswordForLastSuccessfulLogon();
		if (!TextUtils.isEmpty(passwordForLastSuccessfulLogon)) {
			serializeObjectToFile(CacheDataNameForSaveToFile.PASSWORD_FOR_LAST_SUCCESSFUL_LOGON.name(), passwordForLastSuccessfulLogon);
		}
	}

	public static synchronized void writeAllCacheData() {
		// 保存 "用户登录信息"
		writeUserLoginInfo();

	}

	// ///////////////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////////////////////////////////////

	private enum CacheDataNameForSaveToFile {
		// 是否是第一次启动App
		IS_FIRST_START_APP,
		// 保存密码
		SAVE_PASSWORD_MARK,
		// 用户最后一次成功登录时的用户名
		USERNAME_FOR_LAST_SUCCESSFUL_LOGON,
		// 用户最后一次成功登录时的密码
		PASSWORD_FOR_LAST_SUCCESSFUL_LOGON,
		// 系统设置
		SYSTEM_SETTING,
		// 用户常用测试
		QUESTIONNAIRE_TYPE_MAP,
		// 未完成的量表集合
		LIST_OF_UNFINISHED,
	};

	/**
	 * 将一个对象, 序列化到文件中
	 * 
	 * @param fileName
	 * @param fileSavePathString
	 * @param object
	 */
	private static void serializeObjectToFile(final String fileName, final String fileSavePathString, final Object object) {
		File file = null;
		FileOutputStream fileOutputStream = null;
		ObjectOutputStream objectOutputStream = null;
		try {

			do {
				if (object == null) {
					break;
				}
				if (TextUtils.isEmpty(fileName) || TextUtils.isEmpty(fileSavePathString)) {
					break;
				}

				file = new File(fileSavePathString + "/" + fileName);
				if (file.exists()) {
					file.delete();
				}
				file = new File(fileSavePathString + "/" + fileName);
				fileOutputStream = new FileOutputStream(file);
				objectOutputStream = new ObjectOutputStream(fileOutputStream);
				objectOutputStream.writeObject(object);

			} while (false);

		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			try {
				if (objectOutputStream != null) {
					objectOutputStream.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}

			try {
				if (fileOutputStream != null) {
					fileOutputStream.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}

	/**
	 * 从一个文件中, 反序列化一个对象
	 * 
	 * 文件保存目录示例 : /data/data/cn.skyduck.activity/files 这个目录会在用户在应用程序管理中点击 "清理数据"
	 * 按钮后被清理
	 * 
	 * @param fileName
	 * @param fileSavePathString
	 * @return
	 */
	private static Object deserializeObjectFromFile(final String fileName, final String fileSavePathString) {
		Object object = null;
		File file = null;
		FileInputStream fileInputStream = null;
		ObjectInputStream objectInputStream = null;

		try {
			do {
				if (TextUtils.isEmpty(fileName) || TextUtils.isEmpty(fileSavePathString)) {
					break;
				}

				file = new File(fileSavePathString + "/" + fileName);
				if (!file.exists()) {
					break;
				}
				fileInputStream = new FileInputStream(file);
				objectInputStream = new ObjectInputStream(fileInputStream);
				object = objectInputStream.readObject();
			} while (false);
		} catch (Exception ex) {
			object = null;
			ex.printStackTrace();
		} finally {
			try {
				if (objectInputStream != null) {
					objectInputStream.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}

			try {
				if (fileInputStream != null) {
					fileInputStream.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		return object;
	}

	private static Object deserializeObjectFromFile(final String fileName) {
		return deserializeObjectFromFile(fileName, MyApplication.getApplication().getFilesDir().toString());
	}

	private static void serializeObjectToFile(final String fileName, final Object object) {
		serializeObjectToFile(fileName, MyApplication.getApplication().getFilesDir().toString(), object);
	}
}
