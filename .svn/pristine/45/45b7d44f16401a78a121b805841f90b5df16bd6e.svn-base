package cn.retech.adapter;

import java.util.Observable;
import java.util.Observer;

import android.content.Context;
import android.os.Handler;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;
import cn.retech.activity.R;
import cn.retech.domainbean_model.local_book_list.LocalBook;
import cn.retech.domainbean_model.local_book_list.LocalBookList;
import cn.retech.toolutils.ToolsFunctionForThisProgect;

import com.nostra13.universalimageloader.core.ImageLoader;

public class BookStoreAdapter extends BaseAdapter {
	private LocalBookList bookList;
	private Context mContext;
	private Handler handler = new Handler();

	public BookStoreAdapter(Context context, LocalBookList bookList) {
		this.bookList = bookList;
		this.mContext = context;
	}

	@Override
	public int getCount() {
		return bookList.size();
	}

	@Override
	public Object getItem(int position) {
		return bookList.get(position);
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		BookCellHolder holder = null;
		if (convertView == null) {
			LayoutInflater inflaterInstance = LayoutInflater.from(mContext);
			convertView = inflaterInstance.inflate(R.layout.bookcell_layout, null);
			holder = new BookCellHolder(convertView);
			convertView.setTag(holder);
		} else {
			holder = (BookCellHolder) convertView.getTag();
		}
		LocalBook book = (LocalBook) getItem(position);
		book.deleteObservers();
		book.addObserver(holder);
		ImageLoader.getInstance().cancelDisplayTask(holder.book_imageView);
		ImageLoader.getInstance().displayImage(book.getBookInfo().getThumbnail(), holder.book_imageView);
		holder.booksize_textView.setText(ToolsFunctionForThisProgect.bytesToKbOrMb(Long.parseLong(book.getBookInfo().getSize())));
		holder.bookname_textView.setText(book.getBookInfo().getName());
		return convertView;
	}

	private final class BookCellHolder implements Observer {
		private BookCellHolder(View view) {
			bookname_textView = (TextView) view.findViewById(R.id.bookname_textView);
			booksize_textView = (TextView) view.findViewById(R.id.booksize_textView);
			book_imageView = (ImageView) view.findViewById(R.id.book_imageView);
		}

		// 书籍名称
		private TextView bookname_textView;
		// 书籍图片
		private ImageView book_imageView;
		// 书籍zip资源包大小, 以byte为单位.
		private TextView booksize_textView;

		@Override
		public void update(Observable observable, Object data) {
			final LocalBook book = (LocalBook) observable;
			LocalBook.ObserverEnum observerEnum = (LocalBook.ObserverEnum) data;
			switch (observerEnum) {
			case kBookDownloadProgress: {
				handler.post(new Runnable() {

					@Override
					public void run() {
						booksize_textView.setText(book.getDownloadProgress() + "");
					}
				});
			}
				break;
			case kBookState: {
				handler.post(new Runnable() {

					@Override
					public void run() {
						// TODO Auto-generated method stub

					}
				});
			}
				break;

			default:
				break;
			}

		}
	}

}
