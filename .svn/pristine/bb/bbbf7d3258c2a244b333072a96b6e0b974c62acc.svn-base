package cn.retech.activity;

import java.util.ArrayList;
import java.util.List;

import android.app.ActionBar;
import android.content.res.Configuration;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import cn.retech.adapter.MyFragmentPagerAdapter;
import cn.retech.custom_control.ICustomControlDelegate;
import cn.retech.custom_control.PageTitle;
import cn.retech.custom_control.TabNavigation;
import cn.retech.custom_control.TabNavigation.OnTabChangeListener;
import cn.retech.domainbean_model.book_categories.BookCategoriesNetRequestBean;
import cn.retech.domainbean_model.book_categories.BookCategoriesNetRespondBean;
import cn.retech.domainbean_model.book_categories.BookCategory;
import cn.retech.domainbean_model.login.LogonNetRequestBean;
import cn.retech.global_data_cache.GlobalDataCacheForMemorySingleton;
import cn.retech.my_domainbean_engine.domainbean_network_engine_singleton.DomainBeanNetworkEngineSingleton;
import cn.retech.my_domainbean_engine.domainbean_network_engine_singleton.DomainBeanNetworkEngineSingleton.NetRequestIndex;
import cn.retech.my_domainbean_engine.domainbean_network_engine_singleton.IDomainBeanNetRespondListener;
import cn.retech.my_domainbean_engine.net_error_handle.NetErrorBean;

public class PubliceBookStoreActivity extends FragmentActivity implements ICustomControlDelegate {
  private NetRequestIndex netRequestIndexForLogin = new NetRequestIndex();
  private NetRequestIndex netRequestIndexForBookCategories = new NetRequestIndex();

  private TabNavigation mTabNavigation;
  private List<BookCategory> mbookCategories;
  private ViewPager mViewPager;
  private MyFragmentPagerAdapter mAdapter;

  @Override
  public void customControlOnAction(Object contorl, Object actionTypeEnum) {
    // TODO
  }

  @Override
  public void onConfigurationChanged(Configuration newConfig) {
    super.onConfigurationChanged(newConfig);

    if (null != mTabNavigation) {
      mTabNavigation.showCategory(mbookCategories);
    }
  }

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    ActionBar actionBar = getActionBar();
    PageTitle pageTitle = new PageTitle(this);
    pageTitle.setiCustomControlDelegate(this);
    actionBar.setCustomView(pageTitle);
    actionBar.setDisplayShowCustomEnabled(true);
    actionBar.setDisplayShowHomeEnabled(false);

    setContentView(R.layout.activity_public_book_store);

    mTabNavigation = (TabNavigation) findViewById(R.id.tabNavigation);
    mTabNavigation.setOnTabChangeListener(new OnTabChangeListener() {
      @Override
      public void onTabChange(int postion) {
        mViewPager.setCurrentItem(postion);
      }
    });

    mViewPager = (ViewPager) findViewById(R.id.book_list_viewPager);
    mViewPager.setOnPageChangeListener(new OnPageChangeListener() {
      @Override
      public void onPageScrolled(int arg0, float arg1, int arg2) {
      }

      @Override
      public void onPageScrollStateChanged(int arg0) {
      }

      @Override
      public void onPageSelected(int arg0) {
        mTabNavigation.setCurrentItem(arg0);
      }
    });

    testLogon();
  }

  @Override
  protected void onDestroy() {
    super.onDestroy();
  }

  @Override
  protected void onPause() {
    super.onPause();
  }

  @Override
  protected void onRestart() {
    super.onRestart();
  }

  @Override
  protected void onResume() {
    super.onResume();
  }

  @Override
  protected void onStart() {
    super.onStart();
  }

  @Override
  protected void onStop() {
    super.onStop();
  }

  private void testBookCategories() {
    BookCategoriesNetRequestBean netRequestBean = new BookCategoriesNetRequestBean();
    DomainBeanNetworkEngineSingleton.getInstance.requestDomainProtocol(netRequestIndexForBookCategories, netRequestBean,
        new IDomainBeanNetRespondListener() {

          @Override
          public void onFailure(NetErrorBean error) {

          }

          @Override
          public void onSuccess(Object respondDomainBean) {
            BookCategoriesNetRespondBean respondBean = (BookCategoriesNetRespondBean) respondDomainBean;

            mbookCategories = respondBean.getCategories();

            mTabNavigation.showCategory(mbookCategories);

            List<Fragment> fragments = new ArrayList<Fragment>();
            for (BookCategory bookCategory : mbookCategories) {
              Bundle bundle = new Bundle();
              bundle.putString("identifier", bookCategory.getIdentifier());

              fragments.add(Fragment.instantiate(PubliceBookStoreActivity.this, BookListFragment.class.getName(), bundle));
            }

            mAdapter = new MyFragmentPagerAdapter(PubliceBookStoreActivity.this.getSupportFragmentManager(), fragments);
            mViewPager.setAdapter(mAdapter);
            mViewPager.setCurrentItem(0);
          }
        });
  }

  private void testLogon() {
    //
    GlobalDataCacheForMemorySingleton.getInstance.setUsernameForLastSuccessfulLogon("public");
    GlobalDataCacheForMemorySingleton.getInstance.setPasswordForLastSuccessfulLogon("pwpublic");

    LogonNetRequestBean netRequestBean = new LogonNetRequestBean.Builder("public", "pwpublic").builder();
    DomainBeanNetworkEngineSingleton.getInstance.requestDomainProtocol(netRequestIndexForLogin, netRequestBean,
        new IDomainBeanNetRespondListener() {
          @Override
          public void onFailure(NetErrorBean error) {

          }

          @Override
          public void onSuccess(Object respondDomainBean) {
            testBookCategories();
          }

        });
  }
}
